{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Personal research project in C++ 11, VM- & PL-design","body":"<pre>\r\n _____ _____ _____ _____ _____ _____ \r\n| __  | __  |  |  |_   _|  |  |   __|\r\n| __ -|    -|  |  | | | |  |  |__   |\r\n|_____|__|__|_____| |_| |_____|_____|\r\n</pre>\r\n# Background\r\nBrutus is a personal research project and might never make it to a final product. The motivation is to create a location transparent VM for shared-nothing actors. There are several opportunities to develop new garbage collection algoriths given this premisse.\r\n\r\nBesides the implementation of a virtual machine there are also several opportunities to try new language features and different flavors in a type system.\r\n\r\n# Language\r\nThe Brutus language which does not even have a name yet is under heavy development. There are however already some key concepts.\r\n\r\n1. The language enforces a consistent coding style\r\n2. Written code must be easy to comprehend\r\n3. There is no null pointer\r\n4. There are no operators, therefore there is no precedence\r\n5. No packages but a module system\r\n6. \\t and \\r are illegal characters\r\n\r\nHere is an example of how code might look like:\r\n\r\n```\r\n// Operators are left-associative by default and have no precedence.\r\n// This is the same as writing val num = (1.+(3)).*(3) so the actual\r\n// value is 12.\r\nval num = 1 + 3 * 3 \r\n\r\n// A function declaration. Anonymous functions are only\r\n// allowed as arguments for higher order functions.\r\n//\r\n// The if expression is also different in the sense\r\n// that it combines if and else-if constructs you\r\n// already know from other languages.\r\n// _ is the wildcard and means else.\r\n//\r\n// \"yes\" is a synonym for \"true\" and \"no\" is a synonym for \"false\".\r\n//\r\n// Parameter and return types are always required in order to\r\n// make sure type-inference does not do any harm.\r\nfun isEven(x: Int): Boolean = \r\n  if {\r\n    x % 2 == 0 -> yes\r\n    _ -> no\r\n  }\r\n\r\n// This will print \"12 is even\"\r\nif isEven(num) -> Console.println(\"$num is even.\")\r\n\r\n// Operators ending with : are right-associative so this\r\n// is the same as writing ((Nil.::(3)).::(2)).::(1)\r\nval list = 1 :: 2 :: 3 :: Nil\r\n\r\n// Multiply the contents of the list by two.\r\n// Console#println is a reference to the println method\r\n// of the Console object.\r\nlist map { x -> x * 2 } map { _ * 2 } foreach Console#println\r\n\r\n// Classes are final by default so we have to\r\n// declare them virtual to allow inheritance.\r\nvirtual class A(val prop: Int) {\r\n  // Methods are also final by default so we\r\n  // have to declare them virtual if another\r\n  // class is allowed to overwrite them.\r\n  //\r\n  // The foo method is not required to specify\r\n  // the return type because the missing equality\r\n  // sign declares it already as void.\r\n  virtual fun foo() {\r\n    println(\"Hello World\")\r\n  }\r\n}\r\n\r\n// B inherits from A, we pass the value 123\r\n// as the constructor argument\r\nclass B : A(123) {\r\n  override fun foo() {\r\n    println(prop)\r\n  }\r\n}\r\n\r\n// Create an instance of B and call the foo method\r\nval b = new B()\r\nb.foo() //prints 123\r\n\r\n// The notation x#y is always a reference to the member.\r\n// In case of b#field the type of lens is Property[Int] and\r\n// allows us to abstract over arbitrary properties.\r\nval lens = b#prop\r\n\r\nfun doubleIt(x: Property[Int]) {\r\n  val oldValue = x.value\r\n  val newValue = oldValue * 2\r\n  x.update(newValue)\r\n}\r\n\r\ndoubleIt(lens)\r\n\r\nb.foo() //246\r\n```\r\n\r\n# Development\r\n## Building Brutus from Source\r\nThe development environment for Brutus is generated using [GYP](http://code.google.com/p/gyp/). Currently supported platforms include Linux and Windows (64bit).\r\n\r\nBecause this project is also aimed at a better understanding of the new C++11 features a modern compiler is required. The project compiles fine using [clang](http://clang.llvm.org/) on Linux and Visual Studio 2012 Express (Desktop Edition) on Windows.\r\n\r\n### Prequisites\r\nBesides a working compiler tool chain you will need a Python and Subversion installation to download and run GYP.\r\n* Python 2.7.3\r\n* Subversion\r\n\r\n### Linux\r\n1. `make dependencies` to download GYP \r\n2. `make x64.debug` or `make x64.release` to compile an executable.\r\n3. `./recompile-on-change.sh` can be used if inotify-tools are available\r\n\r\n### Windows\r\n1. Install GYP via `svn checkout --force http://gyp.googlecode.com/svn/trunk build/gyp --revision 1451`\r\n2. `python build/gyp_brutus` to generate the project files\r\n3. Open in Visual Studio 2012","name":"Brutus"}